<!--讀取 csv文件-->
window.addEventListener('load', () => {
			const treemapContainer = document.getElementById('treemap')

			d3.text("https://raw.githubusercontent.com/Lamgayin/vis2021s/master/lab02/data.csv", function (data) {

				const allBoss = []
				var txtFile = data
				const studentArr = txtFile.split('\n').map(e => e.split(','))

				const d3Json = {
					children: [],
					name: 'vis2021s'
				}

				//先由小到大排列，算出名次、級距、再算出分數
				const mapping = new Array(41).fill(-1)
				const scoreSort = studentArr.sort((x, y) => {
					let a = isNaN(parseFloat(x[3])) ? 30 : parseFloat(x[3])
					let b = isNaN(parseFloat(y[3])) ? 30 : parseFloat(y[3])

					return b - a
				}).map(e => isNaN(parseFloat(e[3])) ? 30 : parseFloat(e[3]))

				const scoreSet = [...new Set([...scoreSort.filter(e => e >= 30)])]
				const step = (100 - 60) / scoreSet.length

				for (let i of scoreSort) {
					const idx = scoreSet.indexOf(i)
					let score
					if (idx == -1) {
						score = 50
					}
					else {
						score = (100 - step * idx).toFixed(2)
					}
					mapping[i] = score
				}




				for (let i of studentArr) {
					const bossName = i[2].length ? i[2] : (i[1] == '全年' ? '未知' : '非全年')


					if (allBoss.indexOf(bossName) == -1) {
						allBoss.push(bossName)
						d3Json.children.push({
							name: bossName,
							children: []
						})
					}

					const seconds = isNaN(parseInt(i[3])) ? 40 : parseInt(i[3])

					d3Json.children.find(e => e.name == bossName).children.push({
						name: i[0],
						allYears: i[1],
						score: parseInt(i[3]) + "人次",
						value: parseFloat(mapping[seconds])
					})



				}
				treemapContainer.appendChild(mkSVG(treemapContainer, allBoss, d3Json))


		})
				
		})